(defun curry (expr)
  (cond ((atom expr) expr)
        ((eq (car expr) `lambda)
           (let ((args (car (cdr expr)))
                 (body (cdr (cdr expr))))
                (labels
                    ((helper (args)
                        (cond ((= 1 (length args)) `(lambda ,args ,(curry body)))
                          (t `(lambda (,(car args)) ,(helper (cdr args)))))))
                    (helper args))))
        ((eq 1 (length expr)) (curry (car expr)))
        (t (defun helper (ret l)
             (cond ((not l) ret)
                   (t (helper (list ret (curry (car l))) (cdr l)))))
           (helper (curry (car expr)) (cdr expr)))))

(print (curry `(a b (lambda (x y) x) d e f)))
(print (curry `(a b (c d e f (a b c d e) g) f g)))
(print (curry `(lambda (x y z) (x y ((a b c) x)))))
